diff --git a/dist/index.js b/dist/index.js
index ad9264ee040c73aa42dafea17b7d479b83326dd5..ae4eefcc19d1002b26f7b6f4cacc4dab9ed0297d 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -23,70 +23,70 @@ PERFORMANCE OF THIS SOFTWARE.
 
 
 function __awaiter(thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
+  function adopt(value) { return value instanceof P ? value : new P(function(resolve) { resolve(value); }); }
+  return new (P || (P = Promise))(function(resolve, reject) {
+    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+    step((generator = generator.apply(thisArg, _arguments || [])).next());
+  });
 }
 
 /*
   Simple debug logger
 */
 const debugLogger = (label, data) => {
-    if (data) {
-        console.log(`[Sentry Vite Plugin] ${label} ${util.inspect(data, false, null, true)}`);
-    }
-    else {
-        console.log(`[Sentry Vite Plugin] ${label}`);
-    }
+  if (data) {
+    console.log(`[Sentry Vite Plugin] ${label} ${util.inspect(data, false, null, true)}`);
+  }
+  else {
+    console.log(`[Sentry Vite Plugin] ${label}`);
+  }
 };
 
 /*
   Fake sentry cli - it just prints info on actions
 */
 const createFakeCli = (cli, debug = debugLogger) => {
-    const releases = {
-        proposeVersion: () => cli.releases.proposeVersion().then((version) => {
-            debug('Proposed version:\n', version);
-            return version;
-        }),
-        new: (release) => {
-            debug('Creating new release:\n', release);
-            return Promise.resolve(release);
-        },
-        uploadSourceMaps: (release, config) => {
-            debug('Calling upload-sourcemaps with:\n', config);
-            return Promise.resolve(release);
-        },
-        finalize: (release) => {
-            debug('Finalizing release:\n', release);
-            return Promise.resolve(release);
-        },
-        setCommits: (release, config) => {
-            debug('Calling set-commits with:\n', config);
-            return Promise.resolve(release);
-        },
-        newDeploy: (release, config) => {
-            debug('Calling deploy with:\n', config);
-            return Promise.resolve(release);
-        },
-        listDeploys: function (release) {
-            throw new Error('Function not implemented.');
-        },
-        execute: function (args, live) {
-            throw new Error('Function not implemented.');
-        }
-    };
-    const DummySentryCli = {
-        releases,
-        execute: function (args, live) {
-            throw new Error('Function not implemented.');
-        }
-    };
-    return DummySentryCli;
+  const releases = {
+    proposeVersion: () => cli.releases.proposeVersion().then((version) => {
+      debug('Proposed version:\n', version);
+      return version;
+    }),
+    new: (release) => {
+      debug('Creating new release:\n', release);
+      return Promise.resolve(release);
+    },
+    uploadSourceMaps: (release, config) => {
+      debug('Calling upload-sourcemaps with:\n', config);
+      return Promise.resolve(release);
+    },
+    finalize: (release) => {
+      debug('Finalizing release:\n', release);
+      return Promise.resolve(release);
+    },
+    setCommits: (release, config) => {
+      debug('Calling set-commits with:\n', config);
+      return Promise.resolve(release);
+    },
+    newDeploy: (release, config) => {
+      debug('Calling deploy with:\n', config);
+      return Promise.resolve(release);
+    },
+    listDeploys: function(release) {
+      throw new Error('Function not implemented.');
+    },
+    execute: function(args, live) {
+      throw new Error('Function not implemented.');
+    }
+  };
+  const DummySentryCli = {
+    releases,
+    execute: function(args, live) {
+      throw new Error('Function not implemented.');
+    }
+  };
+  return DummySentryCli;
 };
 
 /*
@@ -94,188 +94,188 @@ const createFakeCli = (cli, debug = debugLogger) => {
   On dryRun enabled - returns fake sentryCli
 */
 const createSentryCli = (options) => {
-    const sentryOptions = Object.assign({
-        silent: false
-    }, options);
-    /*
-      Initialize sentry cli
-    */
-    const cli = new SentryCli(options.configFile, {
-        authToken: sentryOptions.authToken,
-        org: sentryOptions.org,
-        project: sentryOptions.project,
-        silent: sentryOptions.silent,
-        url: sentryOptions.url,
-        vcsRemote: sentryOptions.vcsRemote
-    });
-    /*
-      Return fake sentry cli to run in dry mode
-    */
-    if (options.dryRun) {
-        return createFakeCli(cli);
-    }
-    return cli;
+  const sentryOptions = Object.assign({
+    silent: false
+  }, options);
+  /*
+    Initialize sentry cli
+  */
+  const cli = new SentryCli(options.configFile, {
+    authToken: sentryOptions.authToken,
+    org: sentryOptions.org,
+    project: sentryOptions.project,
+    silent: sentryOptions.silent,
+    url: sentryOptions.url,
+    vcsRemote: sentryOptions.vcsRemote
+  });
+  /*
+    Return fake sentry cli to run in dry mode
+  */
+  if (options.dryRun) {
+    return createFakeCli(cli);
+  }
+  return cli;
 };
 
 /*
   Prepare sentry release and returns promise
 */
 const getReleasePromise = (cli, options = {}) => {
-    return (options.release
-        ? Promise.resolve(options.release)
-        : cli.releases.proposeVersion())
-        .then((version) => `${version}`.trim())
-        .catch(() => undefined);
+  return (options.release
+    ? Promise.resolve(options.release)
+    : cli.releases.proposeVersion())
+    .then((version) => `${version}`.trim())
+    .catch(() => undefined);
 };
 
 const MODULE_ID = 'virtual:vite-plugin-sentry/sentry-config';
 const RESOLVED_ID = '\0' + MODULE_ID;
 function ViteSentry(options) {
-    const { skipEnvironmentCheck = false, cleanSourcemapsAfterUpload = false, legacyErrorHandlingMode = false } = options;
-    const cli = createSentryCli(options);
-    const currentReleasePromise = getReleasePromise(cli, options);
-    // plugin state
-    let pluginState = {
-        enabled: false,
-        isProduction: false,
-        sourcemapsCreated: false,
-        baseDir: '',
-        sourcemapsFilePaths: new Set()
-    };
-    const viteSentryPlugin = {
-        name: 'sentry',
-        enforce: 'post',
-        apply(config, { command }) {
-            var _a;
-            // disable plugin in SSR mode
-            // TODO: maybe there is better solution to upload generated SSR artifacts too
-            if ((_a = config.build) === null || _a === void 0 ? void 0 : _a.ssr) {
-                return false;
-            }
-            return true;
-        },
-        /*
-          define SENTRY_RELEASE to `import.meta.env.SENTRY_RELEASE`
-        */
-        config() {
-            return __awaiter(this, void 0, void 0, function* () {
-                const currentRelease = yield currentReleasePromise;
-                return {
-                    define: {
-                        'import.meta.env.VITE_PLUGIN_SENTRY_CONFIG': JSON.stringify({
-                            dist: options.sourceMaps.dist,
-                            release: currentRelease
-                        })
-                    }
-                };
-            });
-        },
-        /*
-          Check incoming config and decise - enable plugin or not
-          We don't want enable plugin for non-production environments
-          also we dont't want to enable with disabled sourcemaps
-        */
-        configResolved(config) {
-            pluginState.sourcemapsCreated = !!config.build.sourcemap;
-            pluginState.isProduction = config.isProduction;
-            pluginState.enabled =
+  const { skipEnvironmentCheck = false, cleanSourcemapsAfterUpload = false, legacyErrorHandlingMode = false } = options;
+  const cli = createSentryCli(options);
+  const currentReleasePromise = getReleasePromise(cli, options);
+  // plugin state
+  let pluginState = {
+    enabled: false,
+    isProduction: false,
+    sourcemapsCreated: false,
+    baseDir: '',
+    sourcemapsFilePaths: new Set()
+  };
+  const viteSentryPlugin = {
+    name: 'sentry',
+    enforce: 'post',
+    apply(config, { command }) {
+      var _a;
+      // disable plugin in SSR mode
+      // TODO: maybe there is better solution to upload generated SSR artifacts too
+      if ((_a = config.build) === null || _a === void 0 ? void 0 : _a.ssr) {
+        return false;
+      }
+      return true;
+    },
+    /*
+      define SENTRY_RELEASE to `import.meta.env.SENTRY_RELEASE`
+    */
+    config() {
+      return __awaiter(this, void 0, void 0, function*() {
+        const currentRelease = yield currentReleasePromise;
+        return {
+          define: {
+            'import.meta.env.VITE_PLUGIN_SENTRY_CONFIG': JSON.stringify({
+              dist: options.sourceMaps.dist,
+              release: currentRelease
+            })
+          }
+        };
+      });
+    },
+    /*
+      Check incoming config and decise - enable plugin or not
+      We don't want enable plugin for non-production environments
+      also we dont't want to enable with disabled sourcemaps
+    */
+    configResolved(config) {
+      pluginState.sourcemapsCreated = !!config.build.sourcemap;
+      pluginState.isProduction = config.mode === "production";
+      pluginState.enabled =
+        pluginState.sourcemapsCreated &&
+        (skipEnvironmentCheck || pluginState.isProduction);
+    },
+    /*
+      Resolve id for virtual module
+    */
+    resolveId(id) {
+      if (id === MODULE_ID) {
+        return RESOLVED_ID;
+      }
+    },
+    /*
+      Provide virtual module
+    */
+    load(id) {
+      if (id === RESOLVED_ID) {
+        return 'globalThis.VITE_PLUGIN_SENTRY_CONFIG = import.meta.env.VITE_PLUGIN_SENTRY_CONFIG\n';
+      }
+    },
+    generateBundle(options, bundle) {
+      var _a, _b;
+      if (cleanSourcemapsAfterUpload) {
+        // set basedir
+        pluginState.baseDir = (_a = options.dir) !== null && _a !== void 0 ? _a : '';
+        for (const file in bundle) {
+          if ((_b = bundle[file]) === null || _b === void 0 ? void 0 : _b.map) {
+            pluginState.sourcemapsFilePaths.add(`${file}.map`);
+          }
+        }
+      }
+    },
+    /*
+      We starting plugin here, because at the moment vite completed with building
+      so sourcemaps must be ready
+    */
+    closeBundle() {
+      return __awaiter(this, void 0, void 0, function*() {
+        const { enabled, sourcemapsCreated, isProduction } = pluginState;
+        const reportSentryError = legacyErrorHandlingMode ? this.warn : this.error;
+        if (!enabled) {
+          if (!isProduction) {
+            this.warn('Skipped because running non-production build. If you want to run it anyway set skipEnvironmentCheck option value to true');
+          }
+          else if (!sourcemapsCreated) {
+            this.warn('Skipped because vite is not configured to provide sourcemaps. Please check configuration setting [options.sourcemap]!');
+          }
+        }
+        else {
+          if (!isProduction && skipEnvironmentCheck) {
+            this.warn('Running in non-production mode!');
+          }
+          const currentRelease = yield currentReleasePromise;
+          if (!currentRelease) {
+            reportSentryError('Release returned from sentry is empty! Please check your config');
+          }
+          else {
+            try {
+              // create release
+              yield cli.releases.new(currentRelease);
+              if (options.cleanArtifacts) {
+                yield cli.releases.execute(['releases', 'files', currentRelease, 'delete', '--all'], true);
+              }
+              // upload source maps
+              yield cli.releases.uploadSourceMaps(currentRelease, options.sourceMaps);
+              // set commits
+              if (options.setCommits) {
+                const { commit, repo, auto } = options.setCommits;
+                if (auto || (repo && commit)) {
+                  yield cli.releases.setCommits(currentRelease, options.setCommits);
+                }
+              }
+              // finalize release
+              if (options.finalize) {
+                yield cli.releases.finalize(currentRelease);
+              }
+              // set deploy options
+              if (options.deploy && options.deploy.env) {
+                yield cli.releases.newDeploy(currentRelease, options.deploy);
+              }
+              if (cleanSourcemapsAfterUpload &&
                 pluginState.sourcemapsCreated &&
-                    (skipEnvironmentCheck || config.isProduction);
-        },
-        /*
-          Resolve id for virtual module
-        */
-        resolveId(id) {
-            if (id === MODULE_ID) {
-                return RESOLVED_ID;
-            }
-        },
-        /*
-          Provide virtual module
-        */
-        load(id) {
-            if (id === RESOLVED_ID) {
-                return 'globalThis.VITE_PLUGIN_SENTRY_CONFIG = import.meta.env.VITE_PLUGIN_SENTRY_CONFIG\n';
-            }
-        },
-        generateBundle(options, bundle) {
-            var _a, _b;
-            if (cleanSourcemapsAfterUpload) {
-                // set basedir
-                pluginState.baseDir = (_a = options.dir) !== null && _a !== void 0 ? _a : '';
-                for (const file in bundle) {
-                    if ((_b = bundle[file]) === null || _b === void 0 ? void 0 : _b.map) {
-                        pluginState.sourcemapsFilePaths.add(`${file}.map`);
-                    }
+                pluginState.sourcemapsFilePaths.size > 0) {
+                for (const file of pluginState.sourcemapsFilePaths) {
+                  this.warn(`Deleting sourcemap file: ${file}`);
+                  yield promises.unlink(path.join(pluginState.baseDir, file));
                 }
+              }
             }
-        },
-        /*
-          We starting plugin here, because at the moment vite completed with building
-          so sourcemaps must be ready
-        */
-        closeBundle() {
-            return __awaiter(this, void 0, void 0, function* () {
-                const { enabled, sourcemapsCreated, isProduction } = pluginState;
-                const reportSentryError = legacyErrorHandlingMode ? this.warn : this.error;
-                if (!enabled) {
-                    if (!isProduction) {
-                        this.warn('Skipped because running non-production build. If you want to run it anyway set skipEnvironmentCheck option value to true');
-                    }
-                    else if (!sourcemapsCreated) {
-                        this.warn('Skipped because vite is not configured to provide sourcemaps. Please check configuration setting [options.sourcemap]!');
-                    }
-                }
-                else {
-                    if (!isProduction && skipEnvironmentCheck) {
-                        this.warn('Running in non-production mode!');
-                    }
-                    const currentRelease = yield currentReleasePromise;
-                    if (!currentRelease) {
-                        reportSentryError('Release returned from sentry is empty! Please check your config');
-                    }
-                    else {
-                        try {
-                            // create release
-                            yield cli.releases.new(currentRelease);
-                            if (options.cleanArtifacts) {
-                                yield cli.releases.execute(['releases', 'files', currentRelease, 'delete', '--all'], true);
-                            }
-                            // upload source maps
-                            yield cli.releases.uploadSourceMaps(currentRelease, options.sourceMaps);
-                            // set commits
-                            if (options.setCommits) {
-                                const { commit, repo, auto } = options.setCommits;
-                                if (auto || (repo && commit)) {
-                                    yield cli.releases.setCommits(currentRelease, options.setCommits);
-                                }
-                            }
-                            // finalize release
-                            if (options.finalize) {
-                                yield cli.releases.finalize(currentRelease);
-                            }
-                            // set deploy options
-                            if (options.deploy && options.deploy.env) {
-                                yield cli.releases.newDeploy(currentRelease, options.deploy);
-                            }
-                            if (cleanSourcemapsAfterUpload &&
-                                pluginState.sourcemapsCreated &&
-                                pluginState.sourcemapsFilePaths.size > 0) {
-                                for (const file of pluginState.sourcemapsFilePaths) {
-                                    this.warn(`Deleting sourcemap file: ${file}`);
-                                    yield promises.unlink(path.join(pluginState.baseDir, file));
-                                }
-                            }
-                        }
-                        catch (error) {
-                            reportSentryError(`Error while uploading sourcemaps to Sentry: ${error.message}`);
-                        }
-                    }
-                }
-            });
+            catch (error) {
+              reportSentryError(`Error while uploading sourcemaps to Sentry: ${error.message}`);
+            }
+          }
         }
-    };
-    return viteSentryPlugin;
+      });
+    }
+  };
+  return viteSentryPlugin;
 }
 
 module.exports = ViteSentry;
diff --git a/dist/index.mjs b/dist/index.mjs
index 46d103ce81f60e439161225486f7299c8ed3d86e..35634029e32175a773c908c85bdcedf98c7aa0ef 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -21,70 +21,70 @@ PERFORMANCE OF THIS SOFTWARE.
 
 
 function __awaiter(thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
+  function adopt(value) { return value instanceof P ? value : new P(function(resolve) { resolve(value); }); }
+  return new (P || (P = Promise))(function(resolve, reject) {
+    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+    step((generator = generator.apply(thisArg, _arguments || [])).next());
+  });
 }
 
 /*
   Simple debug logger
 */
 const debugLogger = (label, data) => {
-    if (data) {
-        console.log(`[Sentry Vite Plugin] ${label} ${inspect(data, false, null, true)}`);
-    }
-    else {
-        console.log(`[Sentry Vite Plugin] ${label}`);
-    }
+  if (data) {
+    console.log(`[Sentry Vite Plugin] ${label} ${inspect(data, false, null, true)}`);
+  }
+  else {
+    console.log(`[Sentry Vite Plugin] ${label}`);
+  }
 };
 
 /*
   Fake sentry cli - it just prints info on actions
 */
 const createFakeCli = (cli, debug = debugLogger) => {
-    const releases = {
-        proposeVersion: () => cli.releases.proposeVersion().then((version) => {
-            debug('Proposed version:\n', version);
-            return version;
-        }),
-        new: (release) => {
-            debug('Creating new release:\n', release);
-            return Promise.resolve(release);
-        },
-        uploadSourceMaps: (release, config) => {
-            debug('Calling upload-sourcemaps with:\n', config);
-            return Promise.resolve(release);
-        },
-        finalize: (release) => {
-            debug('Finalizing release:\n', release);
-            return Promise.resolve(release);
-        },
-        setCommits: (release, config) => {
-            debug('Calling set-commits with:\n', config);
-            return Promise.resolve(release);
-        },
-        newDeploy: (release, config) => {
-            debug('Calling deploy with:\n', config);
-            return Promise.resolve(release);
-        },
-        listDeploys: function (release) {
-            throw new Error('Function not implemented.');
-        },
-        execute: function (args, live) {
-            throw new Error('Function not implemented.');
-        }
-    };
-    const DummySentryCli = {
-        releases,
-        execute: function (args, live) {
-            throw new Error('Function not implemented.');
-        }
-    };
-    return DummySentryCli;
+  const releases = {
+    proposeVersion: () => cli.releases.proposeVersion().then((version) => {
+      debug('Proposed version:\n', version);
+      return version;
+    }),
+    new: (release) => {
+      debug('Creating new release:\n', release);
+      return Promise.resolve(release);
+    },
+    uploadSourceMaps: (release, config) => {
+      debug('Calling upload-sourcemaps with:\n', config);
+      return Promise.resolve(release);
+    },
+    finalize: (release) => {
+      debug('Finalizing release:\n', release);
+      return Promise.resolve(release);
+    },
+    setCommits: (release, config) => {
+      debug('Calling set-commits with:\n', config);
+      return Promise.resolve(release);
+    },
+    newDeploy: (release, config) => {
+      debug('Calling deploy with:\n', config);
+      return Promise.resolve(release);
+    },
+    listDeploys: function(release) {
+      throw new Error('Function not implemented.');
+    },
+    execute: function(args, live) {
+      throw new Error('Function not implemented.');
+    }
+  };
+  const DummySentryCli = {
+    releases,
+    execute: function(args, live) {
+      throw new Error('Function not implemented.');
+    }
+  };
+  return DummySentryCli;
 };
 
 /*
@@ -92,188 +92,188 @@ const createFakeCli = (cli, debug = debugLogger) => {
   On dryRun enabled - returns fake sentryCli
 */
 const createSentryCli = (options) => {
-    const sentryOptions = Object.assign({
-        silent: false
-    }, options);
-    /*
-      Initialize sentry cli
-    */
-    const cli = new SentryCli(options.configFile, {
-        authToken: sentryOptions.authToken,
-        org: sentryOptions.org,
-        project: sentryOptions.project,
-        silent: sentryOptions.silent,
-        url: sentryOptions.url,
-        vcsRemote: sentryOptions.vcsRemote
-    });
-    /*
-      Return fake sentry cli to run in dry mode
-    */
-    if (options.dryRun) {
-        return createFakeCli(cli);
-    }
-    return cli;
+  const sentryOptions = Object.assign({
+    silent: false
+  }, options);
+  /*
+    Initialize sentry cli
+  */
+  const cli = new SentryCli(options.configFile, {
+    authToken: sentryOptions.authToken,
+    org: sentryOptions.org,
+    project: sentryOptions.project,
+    silent: sentryOptions.silent,
+    url: sentryOptions.url,
+    vcsRemote: sentryOptions.vcsRemote
+  });
+  /*
+    Return fake sentry cli to run in dry mode
+  */
+  if (options.dryRun) {
+    return createFakeCli(cli);
+  }
+  return cli;
 };
 
 /*
   Prepare sentry release and returns promise
 */
 const getReleasePromise = (cli, options = {}) => {
-    return (options.release
-        ? Promise.resolve(options.release)
-        : cli.releases.proposeVersion())
-        .then((version) => `${version}`.trim())
-        .catch(() => undefined);
+  return (options.release
+    ? Promise.resolve(options.release)
+    : cli.releases.proposeVersion())
+    .then((version) => `${version}`.trim())
+    .catch(() => undefined);
 };
 
 const MODULE_ID = 'virtual:vite-plugin-sentry/sentry-config';
 const RESOLVED_ID = '\0' + MODULE_ID;
 function ViteSentry(options) {
-    const { skipEnvironmentCheck = false, cleanSourcemapsAfterUpload = false, legacyErrorHandlingMode = false } = options;
-    const cli = createSentryCli(options);
-    const currentReleasePromise = getReleasePromise(cli, options);
-    // plugin state
-    let pluginState = {
-        enabled: false,
-        isProduction: false,
-        sourcemapsCreated: false,
-        baseDir: '',
-        sourcemapsFilePaths: new Set()
-    };
-    const viteSentryPlugin = {
-        name: 'sentry',
-        enforce: 'post',
-        apply(config, { command }) {
-            var _a;
-            // disable plugin in SSR mode
-            // TODO: maybe there is better solution to upload generated SSR artifacts too
-            if ((_a = config.build) === null || _a === void 0 ? void 0 : _a.ssr) {
-                return false;
-            }
-            return true;
-        },
-        /*
-          define SENTRY_RELEASE to `import.meta.env.SENTRY_RELEASE`
-        */
-        config() {
-            return __awaiter(this, void 0, void 0, function* () {
-                const currentRelease = yield currentReleasePromise;
-                return {
-                    define: {
-                        'import.meta.env.VITE_PLUGIN_SENTRY_CONFIG': JSON.stringify({
-                            dist: options.sourceMaps.dist,
-                            release: currentRelease
-                        })
-                    }
-                };
-            });
-        },
-        /*
-          Check incoming config and decise - enable plugin or not
-          We don't want enable plugin for non-production environments
-          also we dont't want to enable with disabled sourcemaps
-        */
-        configResolved(config) {
-            pluginState.sourcemapsCreated = !!config.build.sourcemap;
-            pluginState.isProduction = config.isProduction;
-            pluginState.enabled =
+  const { skipEnvironmentCheck = false, cleanSourcemapsAfterUpload = false, legacyErrorHandlingMode = false } = options;
+  const cli = createSentryCli(options);
+  const currentReleasePromise = getReleasePromise(cli, options);
+  // plugin state
+  let pluginState = {
+    enabled: false,
+    isProduction: false,
+    sourcemapsCreated: false,
+    baseDir: '',
+    sourcemapsFilePaths: new Set()
+  };
+  const viteSentryPlugin = {
+    name: 'sentry',
+    enforce: 'post',
+    apply(config, { command }) {
+      var _a;
+      // disable plugin in SSR mode
+      // TODO: maybe there is better solution to upload generated SSR artifacts too
+      if ((_a = config.build) === null || _a === void 0 ? void 0 : _a.ssr) {
+        return false;
+      }
+      return true;
+    },
+    /*
+      define SENTRY_RELEASE to `import.meta.env.SENTRY_RELEASE`
+    */
+    config() {
+      return __awaiter(this, void 0, void 0, function*() {
+        const currentRelease = yield currentReleasePromise;
+        return {
+          define: {
+            'import.meta.env.VITE_PLUGIN_SENTRY_CONFIG': JSON.stringify({
+              dist: options.sourceMaps.dist,
+              release: currentRelease
+            })
+          }
+        };
+      });
+    },
+    /*
+      Check incoming config and decise - enable plugin or not
+      We don't want enable plugin for non-production environments
+      also we dont't want to enable with disabled sourcemaps
+    */
+    configResolved(config) {
+      pluginState.sourcemapsCreated = !!config.build.sourcemap;
+      pluginState.isProduction = config.mode === "production";
+      pluginState.enabled =
+        pluginState.sourcemapsCreated &&
+        (skipEnvironmentCheck || pluginState.isProduction);
+    },
+    /*
+      Resolve id for virtual module
+    */
+    resolveId(id) {
+      if (id === MODULE_ID) {
+        return RESOLVED_ID;
+      }
+    },
+    /*
+      Provide virtual module
+    */
+    load(id) {
+      if (id === RESOLVED_ID) {
+        return 'globalThis.VITE_PLUGIN_SENTRY_CONFIG = import.meta.env.VITE_PLUGIN_SENTRY_CONFIG\n';
+      }
+    },
+    generateBundle(options, bundle) {
+      var _a, _b;
+      if (cleanSourcemapsAfterUpload) {
+        // set basedir
+        pluginState.baseDir = (_a = options.dir) !== null && _a !== void 0 ? _a : '';
+        for (const file in bundle) {
+          if ((_b = bundle[file]) === null || _b === void 0 ? void 0 : _b.map) {
+            pluginState.sourcemapsFilePaths.add(`${file}.map`);
+          }
+        }
+      }
+    },
+    /*
+      We starting plugin here, because at the moment vite completed with building
+      so sourcemaps must be ready
+    */
+    closeBundle() {
+      return __awaiter(this, void 0, void 0, function*() {
+        const { enabled, sourcemapsCreated, isProduction } = pluginState;
+        const reportSentryError = legacyErrorHandlingMode ? this.warn : this.error;
+        if (!enabled) {
+          if (!isProduction) {
+            this.warn('Skipped because running non-production build. If you want to run it anyway set skipEnvironmentCheck option value to true');
+          }
+          else if (!sourcemapsCreated) {
+            this.warn('Skipped because vite is not configured to provide sourcemaps. Please check configuration setting [options.sourcemap]!');
+          }
+        }
+        else {
+          if (!isProduction && skipEnvironmentCheck) {
+            this.warn('Running in non-production mode!');
+          }
+          const currentRelease = yield currentReleasePromise;
+          if (!currentRelease) {
+            reportSentryError('Release returned from sentry is empty! Please check your config');
+          }
+          else {
+            try {
+              // create release
+              yield cli.releases.new(currentRelease);
+              if (options.cleanArtifacts) {
+                yield cli.releases.execute(['releases', 'files', currentRelease, 'delete', '--all'], true);
+              }
+              // upload source maps
+              yield cli.releases.uploadSourceMaps(currentRelease, options.sourceMaps);
+              // set commits
+              if (options.setCommits) {
+                const { commit, repo, auto } = options.setCommits;
+                if (auto || (repo && commit)) {
+                  yield cli.releases.setCommits(currentRelease, options.setCommits);
+                }
+              }
+              // finalize release
+              if (options.finalize) {
+                yield cli.releases.finalize(currentRelease);
+              }
+              // set deploy options
+              if (options.deploy && options.deploy.env) {
+                yield cli.releases.newDeploy(currentRelease, options.deploy);
+              }
+              if (cleanSourcemapsAfterUpload &&
                 pluginState.sourcemapsCreated &&
-                    (skipEnvironmentCheck || config.isProduction);
-        },
-        /*
-          Resolve id for virtual module
-        */
-        resolveId(id) {
-            if (id === MODULE_ID) {
-                return RESOLVED_ID;
-            }
-        },
-        /*
-          Provide virtual module
-        */
-        load(id) {
-            if (id === RESOLVED_ID) {
-                return 'globalThis.VITE_PLUGIN_SENTRY_CONFIG = import.meta.env.VITE_PLUGIN_SENTRY_CONFIG\n';
-            }
-        },
-        generateBundle(options, bundle) {
-            var _a, _b;
-            if (cleanSourcemapsAfterUpload) {
-                // set basedir
-                pluginState.baseDir = (_a = options.dir) !== null && _a !== void 0 ? _a : '';
-                for (const file in bundle) {
-                    if ((_b = bundle[file]) === null || _b === void 0 ? void 0 : _b.map) {
-                        pluginState.sourcemapsFilePaths.add(`${file}.map`);
-                    }
+                pluginState.sourcemapsFilePaths.size > 0) {
+                for (const file of pluginState.sourcemapsFilePaths) {
+                  this.warn(`Deleting sourcemap file: ${file}`);
+                  yield unlink(path.join(pluginState.baseDir, file));
                 }
+              }
             }
-        },
-        /*
-          We starting plugin here, because at the moment vite completed with building
-          so sourcemaps must be ready
-        */
-        closeBundle() {
-            return __awaiter(this, void 0, void 0, function* () {
-                const { enabled, sourcemapsCreated, isProduction } = pluginState;
-                const reportSentryError = legacyErrorHandlingMode ? this.warn : this.error;
-                if (!enabled) {
-                    if (!isProduction) {
-                        this.warn('Skipped because running non-production build. If you want to run it anyway set skipEnvironmentCheck option value to true');
-                    }
-                    else if (!sourcemapsCreated) {
-                        this.warn('Skipped because vite is not configured to provide sourcemaps. Please check configuration setting [options.sourcemap]!');
-                    }
-                }
-                else {
-                    if (!isProduction && skipEnvironmentCheck) {
-                        this.warn('Running in non-production mode!');
-                    }
-                    const currentRelease = yield currentReleasePromise;
-                    if (!currentRelease) {
-                        reportSentryError('Release returned from sentry is empty! Please check your config');
-                    }
-                    else {
-                        try {
-                            // create release
-                            yield cli.releases.new(currentRelease);
-                            if (options.cleanArtifacts) {
-                                yield cli.releases.execute(['releases', 'files', currentRelease, 'delete', '--all'], true);
-                            }
-                            // upload source maps
-                            yield cli.releases.uploadSourceMaps(currentRelease, options.sourceMaps);
-                            // set commits
-                            if (options.setCommits) {
-                                const { commit, repo, auto } = options.setCommits;
-                                if (auto || (repo && commit)) {
-                                    yield cli.releases.setCommits(currentRelease, options.setCommits);
-                                }
-                            }
-                            // finalize release
-                            if (options.finalize) {
-                                yield cli.releases.finalize(currentRelease);
-                            }
-                            // set deploy options
-                            if (options.deploy && options.deploy.env) {
-                                yield cli.releases.newDeploy(currentRelease, options.deploy);
-                            }
-                            if (cleanSourcemapsAfterUpload &&
-                                pluginState.sourcemapsCreated &&
-                                pluginState.sourcemapsFilePaths.size > 0) {
-                                for (const file of pluginState.sourcemapsFilePaths) {
-                                    this.warn(`Deleting sourcemap file: ${file}`);
-                                    yield unlink(path.join(pluginState.baseDir, file));
-                                }
-                            }
-                        }
-                        catch (error) {
-                            reportSentryError(`Error while uploading sourcemaps to Sentry: ${error.message}`);
-                        }
-                    }
-                }
-            });
+            catch (error) {
+              reportSentryError(`Error while uploading sourcemaps to Sentry: ${error.message}`);
+            }
+          }
         }
-    };
-    return viteSentryPlugin;
+      });
+    }
+  };
+  return viteSentryPlugin;
 }
 
 export { ViteSentry as default };