stages:
  - test
  - linting
  - build
  - deploy
  - housekeeping

image: node:16

.node_mod_installation:
  before_script:
    - npm config set @degrens-21:registry https://gitlab.pieter557.dscloud.me/api/v4/packages/npm/
    - npm config set -- '//gitlab.pieter557.dscloud.me/api/v4/packages/npm/:_authToken' "${CI_JOB_TOKEN}"
    - npm config set always-auth true
    - yarn config set network-timeout 600000 -g
    - yarn --pure-lockfile

.cache_modules:
  cache:
    key: '$CI_COMMIT_REF_NAME-node_modules'
    paths:
      - node_modules/
      - '**/node_modules/'

.js_changes:
  only:
    refs:
      - UPD
      - merge_requests
    changes:
      - '**/*.js'
      - '**/*.ts'
      - '**/*.jsx'
      - '**/*.tsx'
      - '**/*.css'
      - '**/*.scss'
      - '**/*.html'
      - '**/package.json'
      - '**/yarn.lock'

validate json:
  stage: test
  script:
    - cd ./tools/json-validator
    - yarn --pure-lockfile
    - yarn start
  only:
    refs:
      - main
      - UPD
      - merge_requests
    changes:
      - '**/*.json'

validate Errorlogger:
  image: python:3-slim
  stage: test
  script:
    - python ./tools/manifest-check.py
    - exit "${?}"
  only:
    refs:
      - main
      - UPD
      - merge_requests
    changes:
      - '**/fxmanifest.lua'

validate db migrations:
  stage: test
  services:
    - name: mariadb:10.7
      alias: mariadb
  variables:
    MYSQL_ROOT_PASSWORD: root
    MYSQL_DATABASE: degrens2
    MYSQL_USER: dguser
    MYSQL_PASSWORD: dgpw
  script:
    - echo 'DATABASE_URL=mysql://dguser:dgpw@mariadb/degrens2?charset=utf8mb4' > ./packages/db/.env
    - yarn --pure-lockfile
    - yarn db:deploy
  only:
    refs:
      - main
      - UPD
      - merge_requests
    changes:
      - 'packages/db/*'

JS linting:
  extends:
    - .node_mod_installation
    - .cache_modules
    - .js_changes
  stage: linting
  script:
    - yarn lint

TS dev build:
  extends:
    - .node_mod_installation
    - .cache_modules
    - .js_changes
  stage: build
  script:
    - yarn format -- -- --loglevel error
    - yarn build:dev --force

TS prod build:
  extends:
    - .node_mod_installation
    - .cache_modules
    - .js_changes
  only:
    refs:
      - main
  stage: build
  script:
    - yarn format -- -- --loglevel error
    - yarn build

rebase UPD:
  stage: housekeeping
  image: node:lts
  script:
    # setting up git
    - url_host=`git remote get-url origin | sed -e "s/https:\/\/gitlab-ci-token:.*@//g"`
    - git remote set-url origin "https://gitlab-ci-token:${ACCESS_TOKEN_PARAM}@${url_host}"
    - git config http.sslverify false
    - git config --global user.email "ci@gitlab.pieter557.dscloud.me"
    - git config --global user.name "CI"
    - git fetch --all # Just in case branch is not fetch
    - git rebase --abort # Cancel active rebases
    - git switch main
    - git pull --rebase
    - git switch UPD
    - git pull --rebase
    - git reset --hard $(git log -n 1 origin/UPD  --pretty=format:"%H")
    # Rebase
    - git rebase main UPD
    # Push
    - git push -u origin UPD

  only:
    - main

Schedule deploy:
  stage: deploy
  image: alpine:latest
  variables:
    CURL_COMMAND: 'curl --request PUT --header "PRIVATE-TOKEN: $API_TOKEN" --form "value=true" https://gitlab.pieter557.dscloud.me/api/v4/projects/26/pipeline_schedules/1/variables/SHOULD_DEPLOY | jq'
  before_script:
    - apk add --no-cache curl jq
  script:
    - 'eval "$CURL_COMMAND"'
  only:
    - main

Deploy production:
  stage: deploy
  image: ubuntu:jammy
  variables:
    SERVER_IP: '10.0.0.1'
    SERVER_USER: 'fivem'
  tags:
    - windows
    - production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "main" && $SHOULD_DEPLOY == "true"
  script:
    - call C:\Users\fivem\Desktop\degrens-main\update.bat
  # before_script:
  #   - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
  #   - eval $(ssh-agent -s)

  #   - chmod 400 "$SSH_PRIVATE_KEY"
  #   - ssh-add "$SSH_PRIVATE_KEY"

  #   - mkdir -p ~/.ssh
  #   - chmod 700 ~/.ssh

  #   - ssh-keyscan "$SERVER_IP" >> ~/.ssh/known_hosts
  #   - chmod 644 ~/.ssh/known_hosts

  #   - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  # script:
  #   # Login to docker registry with CI credentials
  #   - ssh "$SERVER_USER@$SERVER_IP" "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
  #   # The use of single ticks is as-expected, otherwise we don't have access to the API_TOKEN variable
  #   - ssh "$SERVER_USER@$SERVER_IP" "~/panel/deploy/schedule-update.sh $API_TOKEN"
