stages:
  - test
  - linting
  - build
  - housekeeping

image: node:lts

.lerna_installation:
  before_script:
    - npm config set @degrens-21:registry https://gitlab.pieter557.dscloud.me/api/v4/packages/npm/
    - npm config set -- '//gitlab.pieter557.dscloud.me/api/v4/packages/npm/:_authToken' "${CI_JOB_TOKEN}"
    - npm config set always-auth true
    - yarn config set network-timeout 600000 -g
    - yarn --pure-lockfile

.cache_modules:
  cache:
    key: "$CI_COMMIT_REF_NAME-node_modules"
    paths:
      - node_modules/
      - '**/node_modules/'

.js_changes:
  only:
    refs:
      - main
      - UPD
      - merge_requests
      - tags
    changes:
      - "**/*.js"
      - "**/*.ts"
      - "**/*.jsx"
      - "**/*.tsx"
      - "**/*.css"
      - "**/*.scss"
      - "**/*.html"
      - "**/package.json"
      - "**/yarn.lock"

validate json:
  stage: test
  script:
    - cd ./tools/json-validator
    - yarn --pure-lockfile
    - yarn start
  only:
    refs:
      - main
      - UPD
      - merge_requests
      - tags
    changes:
      - "**/*.json"

Validate Errorlogger:
  image: python:3-slim
  stage: test
  script:
    - python ./tools/manifest-check.py
    - exit "${?}"
  only:
    refs:
      - main
      - UPD
      - merge_requests
      - tags
    changes:
      - '**/fxmanifest.lua'

validate db migrations:
  stage: test
  services:
    - name: mariadb:latest
      alias: mariadb
  variables:
    MYSQL_ROOT_PASSWORD: root
    MYSQL_DATABASE: degrens2
    MYSQL_USER: dguser
    MYSQL_PASSWORD: dgpw
  script:
    - echo 'set mysql_connection_string "mysql://dguser:dgpw@mariadb/degrens2?charset=utf8mb4"' > ./config/mysql.cfg
    - cd ./tools/migrations
    - yarn --pure-lockfile
    - yarn start --init-db
  only:
    refs:
      - main
      - UPD
      - merge_requests
      - tags
    changes:
      - 'migrations/*'

sonarqube-check:
  stage: test
  tags:
    - amd64
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [ "" ]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "$CI_COMMIT_REF_NAME-sonar"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  allow_failure: true
  only:
    - main
    - UPD

JS linting:
  extends:
    - .lerna_installation
    - .cache_modules
    - .js_changes
  stage: linting
  script:
    - yarn lint

JS building:
  extends:
    - .lerna_installation
    - .cache_modules
    - .js_changes
  stage: build
  script:
    - yarn format -- -- --loglevel error
    - yarn build

rebase UPD:
  stage: housekeeping
  image: node:lts
  script:
    # setting up git
    - url_host=`git remote get-url origin | sed -e "s/https:\/\/gitlab-ci-token:.*@//g"`
    - git remote set-url origin "https://gitlab-ci-token:${ACCESS_TOKEN_PARAM}@${url_host}"
    - git config http.sslverify false
    - git config --global user.email "ci@gitlab.pieter557.dscloud.me"
    - git config --global user.name "CI"
    - git fetch # Just in case branch is not fetch
    - git checkout -t origin/main
    - git pull
    - git checkout -t origin/UPD
    - git pull
    # Rebase
    - git rebase main UPD
    # Push
    - git push -u origin UPD

  only:
    - main
