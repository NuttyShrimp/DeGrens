stages:
  - images 
  - test
  - build
  - deploy
  - housekeeping

image: registry-gitlab.pieter557.dscloud.me/degrens-21/degrens-main/node:latest

variables:
  GIT_DEPTH: 5
  FF_USE_FASTZIP: "true" 
  TRANSFER_METER_FREQUENCY: 5s # will display transfer progress every 5 seconds for artifacts and remote caches.

.node_mod_installation:
  before_script:
    - npm config set @degrens-21:registry https://gitlab.pieter557.dscloud.me/api/v4/packages/npm/
    - npm config set -- '//gitlab.pieter557.dscloud.me/api/v4/packages/npm/:_authToken' "${CI_JOB_TOKEN}"
    - npm config set always-auth true
    - yarn config set network-timeout 600000 -g
    - ls /app
    - cp -r /app/cache/.yarn .
    - cp -r /app/cache/node_modules .
    - ls -al .
    - yarn --frozen-lockfile --cache-folder ./.yarn

.cache_modules:
  cache:
    key: '$CI_COMMIT_REF_NAME-node_modules'
    paths:
      - node_modules/
      - .yarn/

.js_changes:
  only:
    refs:
      - UPD
      - merge_requests
    changes:
      - '**/*.js'
      - '**/*.ts'
      - '**/*.jsx'
      - '**/*.tsx'
      - '**/*.css'
      - '**/*.scss'
      - '**/*.html'
      - '**/package.json'
      - '**/yarn.lock'

build node image:
  stage: images 
  image: docker:latest
  services:
    - docker:dind
  only:
    refs:
        - master
        - UPD
    changes:
        - package.json
        - yarn.lock
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/node:latest -t $CI_REGISTRY_IMAGE/node:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE/node:latest
    - docker push $CI_REGISTRY_IMAGE/node:$CI_COMMIT_SHA


validate json:
  stage: test
  image: node:16
  script:
    - cd ./tools/json-validator
    - yarn --pure-lockfile
    - yarn start
  only:
    refs:
      - main
      - UPD
      - merge_requests
    changes:
      - '**/*.json'

validate Errorlogger:
  image: python:3-slim
  stage: test
  script:
    - python ./tools/manifest-check.py
    - exit "${?}"
  only:
    refs:
      - main
      - UPD
      - merge_requests
    changes:
      - '**/fxmanifest.lua'

validate db migrations:
  stage: test
  image: node:16
  services:
    - name: mariadb:10.7
      alias: mariadb
  variables:
    MYSQL_ROOT_PASSWORD: root
    MYSQL_DATABASE: degrens2
    MYSQL_USER: dguser
    MYSQL_PASSWORD: dgpw
  script:
    - echo 'DATABASE_URL=mysql://dguser:dgpw@mariadb/degrens2?charset=utf8mb4' > ./packages/db/.env
    - cd packages/db
    - yarn global add prisma
    # - yarn add prisma --skip-integrity-check --no-save --no-lockfile
    - yarn db:deploy
  only:
    refs:
      - main
      - UPD
      - merge_requests
    changes:
      - 'packages/db/*'

JS linting:
  extends:
    - .node_mod_installation
    # - .cache_modules
    - .js_changes
  stage: test 
  script:
    - yarn lint

TS dev build:
  extends:
    - .node_mod_installation
    # - .cache_modules
    - .js_changes
  stage: build
  script:
    - yarn format -- -- --loglevel error
    - yarn build:dev --force

TS prod build:
  extends:
    - .node_mod_installation
    # - .cache_modules
    - .js_changes
  only:
    refs:
      - main
  stage: build
  script:
    - yarn format -- -- --loglevel error
    - yarn build

rebase UPD:
  variables:
    # For fetch thing shit
    GIT_DEPTH: 50
  stage: housekeeping
  image: node:16
  script:
    # setting up git
    - url_host=`git remote get-url origin | sed -e "s/https:\/\/gitlab-ci-token:.*@//g"`
    - git remote set-url origin "https://gitlab-ci-token:${ACCESS_TOKEN_PARAM}@${url_host}"
    - git config http.sslverify false
    - git config --global user.email "ci@gitlab.pieter557.dscloud.me"
    - git config --global user.name "CI"
    - git fetch --all # Just in case branch is not fetch
    - git rebase --abort || true # Cancel active rebases
    - git switch main
    - git pull --rebase
    - git switch UPD
    - git pull --rebase
    # Rebase
    - git rebase main UPD
    - git status
    # Push
    - git push -u origin UPD
    - git reset --hard $(git log -n 1 origin/UPD  --pretty=format:"%H")

  only:
    - main

Unschedule deploy:
  stage: housekeeping
  image: alpine:latest
  variables:
    CURL_COMMAND: 'curl --request PUT --header "PRIVATE-TOKEN: $API_TOKEN" --form "value=false" https://gitlab.pieter557.dscloud.me/api/v4/projects/26/pipeline_schedules/1/variables/SHOULD_DEPLOY | jq'
  before_script:
    - apk add --no-cache curl jq
  script:
    - 'eval "$CURL_COMMAND"'
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "main"

Schedule deploy:
  stage: deploy
  image: alpine:latest
  variables:
    CURL_COMMAND: 'curl --request PUT --header "PRIVATE-TOKEN: $API_TOKEN" --form "value=true" https://gitlab.pieter557.dscloud.me/api/v4/projects/26/pipeline_schedules/1/variables/SHOULD_DEPLOY | jq'
  before_script:
    - apk add --no-cache curl jq
  script:
    - 'eval "$CURL_COMMAND"'
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_BRANCH == "main"

Deploy production:
  stage: deploy
  image: ubuntu:jammy
  variables:
    SERVER_IP: '10.0.0.1'
    SERVER_USER: 'fivem'
  tags:
    - windows
    - production
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "main" && $SHOULD_DEPLOY == "true"
  script:
    - C:\Users\fivem\Desktop\degrens-main\pull.bat
    - C:\Users\fivem\Desktop\degrens-main\build.bat